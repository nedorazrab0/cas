#!/usr/bin/env python3
#
# Generate passwords

from string import ascii_uppercase, ascii_lowercase, digits, punctuation
from sys import argv
from gc import collect
from secrets import choice
from math import floor, log

def helpme():
    helptext = "- Password generator\n" + \
        "  Usage: pwg [options]\n" + \
        "- Options:\n" + \
        "  [fuldp] [lenght]\n" + \
        "  u  Use uppercase chars\n" + \
        "  l  Use lowercase chars\n" + \
        "  d  Use digits\n" + \
        "  p  Use punctuation symbols\n" + \
        "  f  Use all above\n" + \
        "  e  Generate passwords in an easy memorable look\n" + \
        "     (2+3+3)+(2+3+3), always 16 chars lenght. 104 entropy bits\n" + \
        "- Example:\n" + \
        "  pwg f 39\n" + \
        "  pwg ul 228\n" + \
        "  pwg e\n"

    print(helptext)
    exit

def gen(chars, L):
    return "".join(choice(chars) for i in range(L))

def calculate_ebits(chars, L):
    # https://en.wikipedia.org/wiki/Password_strength
    N = len(chars)
    bits = L * log(N)/log(2)
    print("\n  Entropy bits: " + str(floor(bits)))


def halferp(chars):
    return gen(chars, 2) + " " + gen(chars, 3) + " " + gen(chars, 3)

def erp():
    chars = ascii_uppercase + ascii_lowercase + digits + punctuation
    for i in range(16):
        print("- " + halferp(chars) + "  " + halferp(chars))

    calculate_ebits(chars, 16)

def std(opt):
    chars = ""
    L = int(argv[2])
    if opt == "f":
        chars = ascii_uppercase + ascii_lowercase + digits + punctuation
    else:
        if "u" in opt:
            chars = chars + ascii_uppercase
        if "l" in opt:
            chars = chars + ascii_lowercase
        if "d" in opt:
            chars = chars + digits
        if "p" in opt:
            chars = chars + punctuation

    for i in range(16):
        print("- " + gen(chars, L))

    calculate_ebits(chars, L)

def main():
    opt = argv[1]
    if opt == "e":
        erp()
    elif opt == "--help":
        helpme()
    else:
        std(opt)

    del opt
    collect()

if __name__ == "__main__":
    main()
